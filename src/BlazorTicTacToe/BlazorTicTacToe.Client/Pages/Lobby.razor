@page "/"
@using BlazorTicTacToe.Shared
@rendermode @(new InteractiveWebAssemblyRenderMode(false)) // что-б не отрисовывать два раза. Сервер и клиент
@inject NavigationManager NavigationManager

<h3 class="text-4xl font-bold py-4">Добро пожаловать в Blazor TicTacToe!</h3>

@if (currentRoom is null)
{
    <input @bind="playerName" class="rounded-md my-2 p-2 text-black" placeholder="Ваше Имя" />
    <input @bind="currentRoomName" class="rounded-md my-2 p-2 text-black" placeholder="Название комнаты" />
    <button @onclick="CreateRoom" class="rounded-md w-40 h-10 my-2 bg-blue-400 text-white ">Создать комнату</button>

    if(_rooms.Count > 0)
    {
        <h3 class="text-2xl font-bold py-2">Или присоединяйтесь к комнате ниже: </h3>
        <ul>
            @foreach (var room in _rooms)
            {
                <li>
                    @room.RoomName
                    <button @onclick="() => JoinRoom(room.RoomId)" class="rounded-md py-2 w-40 h-10 bg-blue-400 text-white">
                        Подключиться
                    </button>
                </li>
            }
        </ul>
    }
    
    
}
else
{
    <CascadingValue Value="_hubConnection">
        <Room CurrentRoom="currentRoom" />
    </CascadingValue>
}

@code {
    private HubConnection? _hubConnection;
    private string playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom;
    private List<GameRoom> _rooms = new();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        _hubConnection.On<List<GameRoom>>("Rooms", (roomList) =>
        {
            Console.WriteLine($"We got rooms! Count = {roomList.Count}");
            _rooms = roomList;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task CreateRoom()
    {
        if (_hubConnection is null) return;

        currentRoom = await _hubConnection.InvokeAsync<GameRoom>("CreateRoom",
             currentRoomName,
             playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (_hubConnection is null) return;

        var joinedRoom = await _hubConnection.InvokeAsync<GameRoom>(
            "JoinRoom", roomId, playerName);

        if (joinedRoom is not null)
            currentRoom = joinedRoom;
        else Console.WriteLine("Room is full or does not exits");
    }
}
